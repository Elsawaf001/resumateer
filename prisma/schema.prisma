

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Resume {
  id     String @id @default(cuid())
  userId String

  title       String?
  description String?

  photoUrl    String?
  colorHex    String  @default("#000000")
  borderStyle String  @default("squircle")
  summary     String?
  firstName   String?
  lastName    String?
  jobTitle    String?
  city        String?
  country     String?
  phone       String?
  email       String?

  workExperiences WorkExperience[]
  educations      Education[]
  skills          String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("resumes")
}

model WorkExperience {
  id String @id @default(cuid())

  position    String?
  company     String?
  startDate   DateTime?
  endDate     DateTime?
  description String?

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("work_experiences")
}

model Education {
  id String @id @default(cuid())

  degree    String?
  school    String?
  startDate DateTime?
  endDate   DateTime?

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("educations")
}

model UserSubscription {
  id         String @id @default(cuid())
  userId     String @unique
  appPoints  Int    @default(0)
  userPoints Int    @default(10000)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_subscriptions")
}

model Lead {
  id        String     @id @default(cuid())
  title     String
  content   String
  userId    String
  responses Response[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("leads")
}

model Response {
  id        String   @id @default(cuid())
  type      String // e.g., "cover_letter", "interview_questions", etc.
  content   String
  leadId    String
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}





////paypal


model User {
  id            String    @id @default(cuid())
  clerkUserId   String    @unique // External ID from Clerk
  email         String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  subscription  Subscription?
  apiRequests   ApiRequest[]

  @@index([clerkUserId])
}

model Subscription {
  id                    String    @id @default(cuid())
  userId                String    @unique
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  status                SubscriptionStatus
  paypalSubscriptionId  String?   @unique  // PayPal subscription ID
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  trialStart           DateTime?
  trialEnd             DateTime?
  cancelAtPeriodEnd     Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@index([userId])
  @@index([status])
}

model ApiRequest {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  endpoint  String
  status    Int
  createdAt DateTime  @default(now())

  @@index([userId])
  @@index([createdAt])
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  EXPIRED
}

// Add this model to your Prisma schema
model WebhookEvent {
  id            String    @id
  eventType     String
  processedAt   DateTime  @default(now())
  success       Boolean
  payload       Json

  @@index([eventType])
}